name: pipeline
on:
  push: 
    branches:
      - main
    inputs: 
      GOOGLE_CREDENTIAL_PATH:
        description: 'The path to the google credential file to use.'
        type: string
        required: false
        default: '$RUNNER_TEMP/google_credential.json'

permissions:
  issues: write
  contents: write
  packages: write
  repository-projects: write
  id-token: write

jobs:
  Build:
    runs-on: macos-latest
    steps:
      - shell: bash
        run: echo '${{ inputs.GOOGLE_CREDENTIAL_PATH }}'
      - run: npm install -g firebase-tools
      - uses: actions/checkout@v3
      - name: Install nodejs
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
          
      - id: flutter-action
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.7'
          channel: 'stable'
          architecture: x64

      - shell: bash
        run: echo -n ${{ secrets.GOOGLE_CREDENTIALS }} | base64 --decode -o ${{ inputs.GOOGLE_CREDENTIAL_PATH }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ inputs.GOOGLE_CREDENTIAL_PATH }}'
      # - name: Generate the token
      #   id: generate_token
      #   uses: getsentry/action-github-app-token@v2
      #   with:
      #     app_id: ${{ secrets.APP_ID }}
      #     private_key: ${{ secrets.UNIVERSAL_GH_APP_PRIVATE_KEY_CODE }}
      - name: Install semantic
        run: |
          npm i semantic-release
      - name: Run semantic
        id: semantic
        run: |
          npx semantic-release --branches main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Do something when a new release published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
      - run: |
          cd hello_world 
          flutter pub get
          flutter build appbundle
          firebase appdistribution:distribute build/app/outputs/bundle/release/app-release.aab --debug --app "1:935264185763:android:c9373e09110f60cca7be16"



        
